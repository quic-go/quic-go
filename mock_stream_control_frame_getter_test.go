// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/quic-go/quic-go (interfaces: StreamControlFrameGetter)
//
// Generated by this command:
//
//	mockgen -typed -build_flags=-tags=gomock -package quic -self_package github.com/quic-go/quic-go -destination mock_stream_control_frame_getter_test.go github.com/quic-go/quic-go StreamControlFrameGetter
//

// Package quic is a generated GoMock package.
package quic

import (
	reflect "reflect"

	ackhandler "github.com/quic-go/quic-go/internal/ackhandler"
	gomock "go.uber.org/mock/gomock"
)

// MockStreamControlFrameGetter is a mock of StreamControlFrameGetter interface.
type MockStreamControlFrameGetter struct {
	ctrl     *gomock.Controller
	recorder *MockStreamControlFrameGetterMockRecorder
}

// MockStreamControlFrameGetterMockRecorder is the mock recorder for MockStreamControlFrameGetter.
type MockStreamControlFrameGetterMockRecorder struct {
	mock *MockStreamControlFrameGetter
}

// NewMockStreamControlFrameGetter creates a new mock instance.
func NewMockStreamControlFrameGetter(ctrl *gomock.Controller) *MockStreamControlFrameGetter {
	mock := &MockStreamControlFrameGetter{ctrl: ctrl}
	mock.recorder = &MockStreamControlFrameGetterMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockStreamControlFrameGetter) EXPECT() *MockStreamControlFrameGetterMockRecorder {
	return m.recorder
}

// getControlFrame mocks base method.
func (m *MockStreamControlFrameGetter) getControlFrame() (ackhandler.Frame, bool, bool) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "getControlFrame")
	ret0, _ := ret[0].(ackhandler.Frame)
	ret1, _ := ret[1].(bool)
	ret2, _ := ret[2].(bool)
	return ret0, ret1, ret2
}

// getControlFrame indicates an expected call of getControlFrame.
func (mr *MockStreamControlFrameGetterMockRecorder) getControlFrame() *MockStreamControlFrameGettergetControlFrameCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "getControlFrame", reflect.TypeOf((*MockStreamControlFrameGetter)(nil).getControlFrame))
	return &MockStreamControlFrameGettergetControlFrameCall{Call: call}
}

// MockStreamControlFrameGettergetControlFrameCall wrap *gomock.Call
type MockStreamControlFrameGettergetControlFrameCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockStreamControlFrameGettergetControlFrameCall) Return(arg0 ackhandler.Frame, arg1, arg2 bool) *MockStreamControlFrameGettergetControlFrameCall {
	c.Call = c.Call.Return(arg0, arg1, arg2)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockStreamControlFrameGettergetControlFrameCall) Do(f func() (ackhandler.Frame, bool, bool)) *MockStreamControlFrameGettergetControlFrameCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockStreamControlFrameGettergetControlFrameCall) DoAndReturn(f func() (ackhandler.Frame, bool, bool)) *MockStreamControlFrameGettergetControlFrameCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}
